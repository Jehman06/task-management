{"version":3,"file":"static/js/903.24ab5b6b.chunk.js","mappings":"8PAcA,MAgHA,EAhHuCA,KAEnC,MAAMC,GAA+BC,EAAAA,EAAAA,KAChCC,GAAqBA,EAAMC,MAAMC,uBAEhCC,GAAoBJ,EAAAA,EAAAA,KAAaC,GAAqBA,EAAMI,UAAUD,oBACtEE,GAAmCN,EAAAA,EAAAA,KACpCC,GAAqBA,EAAMC,MAAMI,oBAEhCC,GAAWC,EAAAA,EAAAA,MAwCjB,OACIC,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CACFC,KAAMZ,EACNa,OAAQA,IAAML,GAASM,EAAAA,EAAAA,OACvBC,UAAQ,EAAAC,SAAA,EAERC,EAAAA,EAAAA,KAACN,EAAAA,EAAMO,OAAM,CAACC,aAAW,EAACC,MAAO,CAAEC,gBAAiB,UAAWC,MAAO,WAAYN,UAC9EC,EAAAA,EAAAA,KAACN,EAAAA,EAAMY,MAAK,CAAAP,SAAC,8BAEjBC,EAAAA,EAAAA,KAACN,EAAAA,EAAMa,KAAI,CACPJ,MAAO,CAAEC,gBAAiB,UAAWC,MAAO,WAC5CG,UAAU,aAAYT,UAEtBN,EAAAA,EAAAA,MAACgB,EAAAA,EAAI,CAAAV,SAAA,EACDC,EAAAA,EAAAA,KAACS,EAAAA,EAAKC,MAAK,CAACF,UAAU,OAAOG,UAAU,+BACvClB,EAAAA,EAAAA,MAACgB,EAAAA,EAAKC,MAAK,CAACF,UAAU,OAAOG,UAAU,4BAA2BZ,SAAA,EAC9DC,EAAAA,EAAAA,KAACS,EAAAA,EAAKG,MAAK,CAAAb,SAAC,oBACZC,EAAAA,EAAAA,KAACS,EAAAA,EAAKI,QAAO,CACTC,KAAK,OACLN,UAAU,cACVO,WAAS,EACTC,UAAQ,EACRC,MAAO7B,EAAkB8B,KACzBC,SAAWC,GACP7B,GAAS8B,EAAAA,EAAAA,IAAqB,CAAEH,KAAME,EAAEE,OAAOL,WAGtD3B,IACGU,EAAAA,EAAAA,KAAA,OAAKQ,UAAU,6EAA4ET,SACtFT,QAIbG,EAAAA,EAAAA,MAACgB,EAAAA,EAAKC,MAAK,CAACF,UAAU,OAAOG,UAAU,+BAA8BZ,SAAA,EACjEC,EAAAA,EAAAA,KAACS,EAAAA,EAAKG,MAAK,CAAAb,SAAC,iBACZC,EAAAA,EAAAA,KAACS,EAAAA,EAAKI,QAAO,CACTU,GAAG,WACHC,KAAM,EACNhB,UAAU,cACVS,MAAO7B,EAAkBqC,YACzBN,SAAWC,GACP7B,GAAS8B,EAAAA,EAAAA,IAAqB,CAAEI,YAAaL,EAAEE,OAAOL,oBAM1ExB,EAAAA,EAAAA,MAACC,EAAAA,EAAMgC,OAAM,CAACvB,MAAO,CAAEC,gBAAiB,UAAWC,MAAO,WAAYN,SAAA,EAClEC,EAAAA,EAAAA,KAAC2B,EAAAA,EAAM,CACHC,QAAQ,YACRC,QAASA,IAAMtC,GAASM,EAAAA,EAAAA,OACxBW,UAAU,sBAAqBT,SAClC,WAGDC,EAAAA,EAAAA,KAAC2B,EAAAA,EAAM,CAACC,QAAQ,UAAUC,QAlEbC,UAChB1C,EAAkB8B,MA3BHY,WACpB,UAEUC,EAAAA,EAAAA,KAEN,MAAMC,EAAcC,EAAAA,EAAQC,IAAI,sBAEMC,EAAAA,EAAMC,KACxC,8CACAhD,EACA,CACIiD,QAAS,CACL,eAAgB,sBAChBC,cAAc,UAADC,OAAYP,MAKrCzC,GAASiD,EAAAA,EAAAA,OAETC,OAAOC,SAASC,QACpB,CAAE,MAAOC,GACLC,QAAQD,MAAM,4BAA6BA,EAC/C,GASAE,CAAgB1D,GAChBG,GAASM,EAAAA,EAAAA,OACTN,GAASiD,EAAAA,EAAAA,QANLjD,GAASwD,EAAAA,EAAAA,GAAqB,6CAMN,EA0DiCvC,UAAU,gBAAeT,SAAC,0BAI/E,C","sources":["Components/Modals/Create/CreateWorkspaceModal.tsx"],"sourcesContent":["import React from 'react';\nimport { Modal, Form, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../../redux/store';\nimport axios, { AxiosResponse } from 'axios';\nimport Cookies from 'js-cookie';\nimport {\n    resetModalStates,\n    updateCreateWorkspaceModal,\n    setErrorTitleMessage,\n} from '../../../redux/reducers/modalSlice';\nimport { setWorkspaceFormData } from '../../../redux/reducers/workspaceSlice';\nimport { verifyAccessToken } from '../../../utils/apiUtils';\n\nconst CreateWorkspaceModal: React.FC = () => {\n    // Redux state management\n    const createWorkspaceShow: boolean = useSelector(\n        (state: RootState) => state.modal.createWorkspaceModal\n    );\n    const workspaceFormData = useSelector((state: RootState) => state.workspace.workspaceFormData);\n    const errorTitleMessage: string | null = useSelector(\n        (state: RootState) => state.modal.errorTitleMessage\n    );\n    const dispatch = useDispatch();\n\n    // Send a POST request to the workspace API to create a new workspace\n    const createWorkspace = async (workspaceFormData: any) => {\n        try {\n            // Verify the validity of JWT token, and refresh it if invalid (See utils/apiUtils.ts)\n            await verifyAccessToken();\n            // Get access token from cookies\n            const accessToken = Cookies.get('access_token');\n            // Send POST request to workspace API\n            const response: AxiosResponse = await axios.post(\n                'http://127.0.0.1:8000/api/workspaces/create',\n                workspaceFormData,\n                {\n                    headers: {\n                        'Content-Type': 'multipart/form-data',\n                        Authorization: `Bearer ${accessToken}`,\n                    },\n                }\n            );\n            // Reset error message\n            dispatch(resetModalStates());\n            // Reload the page to fetch updated data\n            window.location.reload();\n        } catch (error) {\n            console.error('Error creating workspace:', error);\n        }\n    };\n\n    const handleFormSubmit = async (): Promise<void> => {\n        if (!workspaceFormData.name) {\n            dispatch(setErrorTitleMessage('Please provide a name for your workspace.'));\n            return;\n        }\n        // Dispatch action to create workspace with form data\n        createWorkspace(workspaceFormData);\n        dispatch(updateCreateWorkspaceModal());\n        dispatch(resetModalStates());\n    };\n\n    return (\n        <Modal\n            show={createWorkspaceShow}\n            onHide={() => dispatch(updateCreateWorkspaceModal())}\n            centered\n        >\n            <Modal.Header closeButton style={{ backgroundColor: '#33373a', color: '#9fadbc' }}>\n                <Modal.Title>Create a new Workspace</Modal.Title>\n            </Modal.Header>\n            <Modal.Body\n                style={{ backgroundColor: '#33373a', color: '#9fadbc' }}\n                className=\"modal-body\"\n            >\n                <Form>\n                    <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlInput1\"></Form.Group>\n                    <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlInput1\">\n                        <Form.Label>Workspace name</Form.Label>\n                        <Form.Control\n                            type=\"text\"\n                            className=\"modal-input\"\n                            autoFocus\n                            required\n                            value={workspaceFormData.name}\n                            onChange={(e) =>\n                                dispatch(setWorkspaceFormData({ name: e.target.value }))\n                            }\n                        />\n                        {errorTitleMessage && (\n                            <div className=\"p-1 text-danger bg-danger-subtle border border-danger rounded-3 w-100 mb-2\">\n                                {errorTitleMessage}\n                            </div>\n                        )}\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlTextarea1\">\n                        <Form.Label>Description</Form.Label>\n                        <Form.Control\n                            as=\"textarea\"\n                            rows={3}\n                            className=\"modal-input\"\n                            value={workspaceFormData.description}\n                            onChange={(e) =>\n                                dispatch(setWorkspaceFormData({ description: e.target.value }))\n                            }\n                        />\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n            <Modal.Footer style={{ backgroundColor: '#33373a', color: '#9fadbc' }}>\n                <Button\n                    variant=\"secondary\"\n                    onClick={() => dispatch(updateCreateWorkspaceModal())}\n                    className=\"modal-create-button\"\n                >\n                    Close\n                </Button>\n                <Button variant=\"primary\" onClick={handleFormSubmit} className=\"create-button\">\n                    Create workspace\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default CreateWorkspaceModal;\n"],"names":["CreateWorkspaceModal","createWorkspaceShow","useSelector","state","modal","createWorkspaceModal","workspaceFormData","workspace","errorTitleMessage","dispatch","useDispatch","_jsxs","Modal","show","onHide","updateCreateWorkspaceModal","centered","children","_jsx","Header","closeButton","style","backgroundColor","color","Title","Body","className","Form","Group","controlId","Label","Control","type","autoFocus","required","value","name","onChange","e","setWorkspaceFormData","target","as","rows","description","Footer","Button","variant","onClick","async","verifyAccessToken","accessToken","Cookies","get","axios","post","headers","Authorization","concat","resetModalStates","window","location","reload","error","console","createWorkspace","setErrorTitleMessage"],"sourceRoot":""}