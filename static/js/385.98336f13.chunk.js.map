{"version":3,"file":"static/js/385.98336f13.chunk.js","mappings":"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","sources":["Components/Dropdowns/UserQuery.tsx","Components/Modals/Workspace/WorkspaceMembersModal.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../redux/store';\nimport { Member } from '../../redux/reducers/workspaceSlice';\nimport './Dropdown.css';\nimport { setSelectedUsers } from '../../redux/reducers/appSlice';\nimport AsyncSelect from 'react-select/async';\nimport { verifyAccessToken } from '../../utils/apiUtils';\nimport Cookies from 'js-cookie';\nimport axios from 'axios';\nimport { Button } from 'react-bootstrap';\n\ninterface UserQueryDropdownProps {\n    searchResults?: Member[];\n    id: number;\n}\n\nconst UserQueryDropdown: React.FC<UserQueryDropdownProps> = ({ id }) => {\n    const selectedUsers = useSelector((state: RootState) => state.app.selectedUsers);\n    const dispatch = useDispatch();\n\n    // Function to query through the database to search members\n    const loadOptions = async (inputValue: string) => {\n        try {\n            verifyAccessToken();\n            const accessToken = Cookies.get('access_token');\n\n            // Send a GET request to search for users\n            const response = await axios.get(\n                `http://127.0.0.1:8000/api/user/profiles/?search=${inputValue}&workspace_id=${id}`,\n                {\n                    headers: {\n                        Authorization: `Bearer ${accessToken}`,\n                    },\n                }\n            );\n            const users = response.data;\n            // Map though users and set the values and labels\n            const options = users.map((user: Member) => ({\n                value: {\n                    id: user.id,\n                    email: user.email,\n                    name: user.name,\n                    nickname: user.nickname,\n                },\n                label: user.name && user.nickname ? `${user.name} (${user.nickname})` : user.email,\n            }));\n            return options;\n        } catch (error) {\n            console.error('Error searching for users:', error);\n            return [];\n        }\n    };\n\n    const handleChange = (selectedOptions: any) => {\n        const selectedUsers = selectedOptions.map((option: any) => ({\n            id: option.value.id,\n            email: option.value.email,\n            name: option.value.name,\n            nickname: option.value.nickname,\n        }));\n\n        // Dispatch an action to update the state in your Redux store\n        dispatch(setSelectedUsers(selectedUsers));\n    };\n\n    // Function to send the invite and notifications to the selected users\n    const inviteUsers = async (): Promise<void> => {\n        try {\n            verifyAccessToken();\n            const accessToken = Cookies.get('access_token');\n\n            // Get the recipient IDs from selectedUsers\n            const recipientIds = selectedUsers.map((user) => user.id);\n\n            const workspaceId = id;\n\n            // Send a POST request to send invite and notifications to selected users\n            const response = await axios.post(\n                'http://127.0.0.1:8000/api/workspaces/members/invite',\n                {\n                    selected_user_ids: recipientIds,\n                    workspace_id: workspaceId,\n                },\n                {\n                    headers: {\n                        Authorization: `Bearer ${accessToken}`,\n                    },\n                }\n            );\n            // TODO: Better error handling\n            console.log(response.data);\n        } catch (error) {\n            console.error('Error inviting users:', error);\n        }\n    };\n\n    return (\n        <div>\n            <AsyncSelect\n                loadOptions={loadOptions}\n                isMulti\n                isClearable\n                isSearchable\n                onChange={handleChange}\n                className=\"async-select\"\n            />\n            <Button variant=\"secondary\" onClick={inviteUsers} className=\"invite-button\">\n                Invite users\n            </Button>\n        </div>\n    );\n};\n\nexport default React.memo(UserQueryDropdown);\n","import React, { ChangeEvent, useEffect } from 'react';\nimport { Modal } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../../redux/store';\nimport {\n    fetchSearchResults,\n    resetSearchResults,\n    setInputFocus,\n    setSearchQuery,\n} from '../../../redux/reducers/appSlice';\nimport debounce from 'lodash.debounce';\nimport { verifyAccessToken } from '../../../utils/apiUtils';\nimport Cookies from 'js-cookie';\nimport axios from 'axios';\nimport UserQueryDropdown from '../../Dropdowns/UserQuery';\nimport '../Modal.css';\n\ninterface Member {\n    email: string;\n    name?: string;\n    nickname?: string;\n}\n\ninterface WorkspaceMembersModalProps {\n    id: number;\n    show: boolean;\n    onHide: () => void;\n    members: Member[];\n    workspaceName: string;\n}\n\nconst WorkspaceMembersModal: React.FC<WorkspaceMembersModalProps> = ({\n    show,\n    onHide,\n    members,\n    id,\n    workspaceName,\n}) => {\n    const workspaceIdToShowModal = useSelector(\n        (state: RootState) => state.modal.workspaceIdToShowModal\n    );\n\n    // Make sure it's the correct selected workspace\n    if (id != workspaceIdToShowModal) {\n        return null;\n    }\n\n    return (\n        <>\n            <Modal show={show} onHide={onHide} centered size=\"xl\">\n                <Modal.Header closeButton style={{ backgroundColor: '#33373a', color: '#9fadbc' }}>\n                    <Modal.Title>{workspaceName}'s members</Modal.Title>\n                </Modal.Header>\n                <Modal.Body style={{ backgroundColor: '#33373a', color: '#9fadbc' }}>\n                    <div\n                        style={{\n                            display: 'grid',\n                            gridTemplateColumns: 'repeat(4, 1fr)',\n                            gap: '10px',\n                        }}\n                    >\n                        {members.map((member) => (\n                            <div key={member.email} className=\"members-workspace-member\">\n                                <ul>\n                                    <li>\n                                        <p className=\"members-workspace-member-items\">\n                                            {member.name || member.email}{' '}\n                                            {member.nickname ? `(${member.nickname})` : ''}\n                                        </p>\n                                    </li>\n                                </ul>\n                            </div>\n                        ))}\n                    </div>\n                    <UserQueryDropdown id={id} />\n                </Modal.Body>\n            </Modal>\n        </>\n    );\n};\n\nexport default WorkspaceMembersModal;\n"],"names":["UserQueryDropdown","_ref","id","selectedUsers","useSelector","state","app","dispatch","useDispatch","_jsxs","children","_jsx","AsyncSelect","loadOptions","async","verifyAccessToken","accessToken","Cookies","get","users","axios","concat","inputValue","headers","Authorization","data","map","user","value","email","name","nickname","label","error","console","isMulti","isClearable","isSearchable","onChange","selectedOptions","option","setSelectedUsers","className","Button","variant","onClick","recipientIds","workspaceId","response","post","selected_user_ids","workspace_id","log","React","show","onHide","members","workspaceName","modal","workspaceIdToShowModal","_Fragment","Modal","centered","size","Header","closeButton","style","backgroundColor","color","Title","Body","display","gridTemplateColumns","gap","member"],"sourceRoot":""}