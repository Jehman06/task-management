{"version":3,"file":"static/js/292.703bf4ca.chunk.js","mappings":"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","sources":["../node_modules/react-bootstrap/esm/types.js","../node_modules/react-bootstrap/esm/DropdownButton.js","../node_modules/react-bootstrap/esm/ButtonGroup.js","Components/Modals/Create/CreateBoardModal.tsx"],"sourcesContent":["import PropTypes from 'prop-types';\nconst alignDirection = PropTypes.oneOf(['start', 'end']);\nexport const alignPropType = PropTypes.oneOfType([alignDirection, PropTypes.shape({\n  sm: alignDirection\n}), PropTypes.shape({\n  md: alignDirection\n}), PropTypes.shape({\n  lg: alignDirection\n}), PropTypes.shape({\n  xl: alignDirection\n}), PropTypes.shape({\n  xxl: alignDirection\n}), PropTypes.object]);","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Dropdown from './Dropdown';\nimport DropdownToggle from './DropdownToggle';\nimport DropdownMenu from './DropdownMenu';\nimport { alignPropType } from './types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst propTypes = {\n  /**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string}\n   */\n  id: PropTypes.string,\n  /** An `href` passed to the Toggle component */\n  href: PropTypes.string,\n  /** An `onClick` handler passed to the Toggle component */\n  onClick: PropTypes.func,\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n  /**\n   * Aligns the dropdown menu.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   *\n   * @type {\"start\"|\"end\"|{ sm: \"start\"|\"end\" }|{ md: \"start\"|\"end\" }|{ lg: \"start\"|\"end\" }|{ xl: \"start\"|\"end\"}|{ xxl: \"start\"|\"end\"} }\n   */\n  align: alignPropType,\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\n  renderMenuOnMount: PropTypes.bool,\n  /**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#dropdown-menu-props) for more details_\n   */\n  rootCloseEvent: PropTypes.string,\n  /**\n   * Menu color variant.\n   *\n   * Omitting this will use the default light color.\n   */\n  menuVariant: PropTypes.oneOf(['dark']),\n  /**\n   * Allow Dropdown to flip in case of an overlapping on the reference element. For more information refer to\n   * Popper.js's flip [docs](https://popper.js.org/docs/v2/modifiers/flip/).\n   *\n   */\n  flip: PropTypes.bool,\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n  /** @ignore */\n  variant: PropTypes.string,\n  /** @ignore */\n  size: PropTypes.string\n};\n\n/**\n * A convenience component for simple or general use dropdowns. Renders a `Button` toggle and all `children`\n * are passed directly to the default `Dropdown.Menu`. This component accepts all of\n * [`Dropdown`'s props](#dropdown-props).\n *\n * _All unknown props are passed through to the `Dropdown` component._ Only\n * the Button `variant`, `size` and `bsPrefix` props are passed to the toggle,\n * along with menu-related props are passed to the `Dropdown.Menu`\n */\nconst DropdownButton = /*#__PURE__*/React.forwardRef(({\n  title,\n  children,\n  bsPrefix,\n  rootCloseEvent,\n  variant,\n  size,\n  menuRole,\n  renderMenuOnMount,\n  disabled,\n  href,\n  id,\n  menuVariant,\n  flip,\n  ...props\n}, ref) => /*#__PURE__*/_jsxs(Dropdown, {\n  ref: ref,\n  ...props,\n  children: [/*#__PURE__*/_jsx(DropdownToggle, {\n    id: id,\n    href: href,\n    size: size,\n    variant: variant,\n    disabled: disabled,\n    childBsPrefix: bsPrefix,\n    children: title\n  }), /*#__PURE__*/_jsx(DropdownMenu, {\n    role: menuRole,\n    renderOnMount: renderMenuOnMount,\n    rootCloseEvent: rootCloseEvent,\n    variant: menuVariant,\n    flip: flip,\n    children: children\n  })]\n}));\nDropdownButton.displayName = 'DropdownButton';\nDropdownButton.propTypes = propTypes;\nexport default DropdownButton;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ButtonGroup = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  size,\n  vertical = false,\n  className,\n  role = 'group',\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...rest\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn-group');\n  let baseClass = prefix;\n  if (vertical) baseClass = `${prefix}-vertical`;\n  return /*#__PURE__*/_jsx(Component, {\n    ...rest,\n    ref: ref,\n    role: role,\n    className: classNames(className, baseClass, size && `${prefix}-${size}`)\n  });\n});\nButtonGroup.displayName = 'ButtonGroup';\nexport default ButtonGroup;","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    updateCreateBoardModal,\n    setSelectedCustomImage,\n    setSelectedDefaultImage,\n    setSelectedWorkspace,\n    setErrorTitleMessage,\n    setErrorImageMessage,\n    resetModalStates,\n    setErrorWorkspaceMessage,\n    setImages,\n    setShowImageModal,\n    setSampleImages,\n} from '../../../redux/reducers/modalSlice';\nimport { setBoardFormData } from '../../../redux/reducers/boardSlice';\nimport { RootState } from '../../../redux/store';\nimport '../Modal.css';\nimport { Modal, Form, Button, DropdownButton, ButtonGroup, Dropdown } from 'react-bootstrap';\nimport axios from 'axios';\nimport Cookies from 'js-cookie';\nimport { verifyAccessToken } from '../../../utils/apiUtils';\nimport type { Image } from '../../../redux/reducers/modalSlice';\nimport { FaArrowRight } from 'react-icons/fa';\n\nconst CreateBoardModal: React.FC = () => {\n    const [formValid, setFormValid] = useState(false);\n\n    // Redux state management\n    const createBoardShow: boolean = useSelector(\n        (state: RootState) => state.modal.createBoardModal\n    );\n    const boardFormData = useSelector((state: RootState) => state.board.boardFormData);\n    const workspaces = useSelector((state: RootState) => state.workspace.workspaces);\n    const selectedWorkspace = useSelector((state: RootState) => state.modal.selectedWorkspace);\n    const selectedDefaultImage: Image | null = useSelector(\n        (state: RootState) => state.modal.selectedDefaultImage\n    );\n    const errorTitleMessage: string | null = useSelector(\n        (state: RootState) => state.modal.errorTitleMessage\n    );\n    const errorImageMessage: string | null = useSelector(\n        (state: RootState) => state.modal.errorImageMessage\n    );\n    const errorWorkspaceMessage: string | null = useSelector(\n        (state: RootState) => state.modal.errorWorkspaceMessage\n    );\n    const sampleImages = useSelector((state: RootState) => state.modal.sampleImages);\n    const images = useSelector((state: RootState) => state.modal.images);\n    const showImageModal = useSelector((state: RootState) => state.modal.showImageModal);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        fetchImagesSample();\n    }, []);\n\n    useEffect(() => {\n        if (showImageModal) {\n            fetchImages();\n        }\n    }, [showImageModal]);\n\n    useEffect(() => {\n        if (selectedDefaultImage && boardFormData.title && boardFormData.workspace.name) {\n            setFormValid(true);\n        } else {\n            setFormValid(false);\n        }\n    }, [selectedDefaultImage, boardFormData.title, boardFormData.workspace.name]);\n\n    // Modify handleImageSelect to store the selected image object\n    const handleImageSelect = (image: any) => {\n        dispatch(setSelectedDefaultImage(image));\n        dispatch(setBoardFormData({ ...boardFormData, default_image: image.id })); // Dispatch action to update default_image in board form data\n    };\n\n    const fetchImagesSample = async () => {\n        try {\n            const accessToken = Cookies.get('access_token');\n            const response = await axios.get('http://127.0.0.1:8000/api/images/sample', {\n                headers: {\n                    Authorization: `Bearer ${accessToken}`,\n                },\n            });\n            dispatch(setSampleImages(response.data.images));\n        } catch (error) {\n            console.error('Error fetching images:', error);\n        }\n    };\n\n    const fetchImages = async () => {\n        try {\n            await verifyAccessToken();\n            const accessToken = Cookies.get('access_token');\n\n            const response = await axios.get('http://127.0.0.1:8000/api/images/all', {\n                headers: {\n                    Authorization: `Bearer ${accessToken}`,\n                },\n            });\n            dispatch(setImages(response.data.images));\n        } catch (error) {\n            console.error('Error fetching images:', error);\n        }\n    };\n\n    useEffect(() => {\n        // Set the first workspace as the default selected workspace when workspaces change\n        if (workspaces.length > 0) {\n            dispatch(setSelectedWorkspace(workspaces[0]));\n            dispatch(setBoardFormData({ ...boardFormData, workspace: workspaces[0] }));\n        }\n    }, [workspaces, dispatch]);\n\n    const createBoard = async (boardFormData: any) => {\n        // Get the access token from cookies\n        const accessToken = Cookies.get('access_token');\n        try {\n            await verifyAccessToken();\n            // Send POST request to Board API to create the board\n            const response = await axios.post(\n                'http://127.0.0.1:8000/api/boards/create',\n                boardFormData,\n                {\n                    headers: {\n                        'Content-Type': 'application/json',\n                        Authorization: `Bearer ${accessToken}`,\n                    },\n                }\n            );\n            // Reset error message\n            dispatch(resetModalStates());\n            // Reload the page to fetch updated data\n            window.location.reload();\n            console.log('boardFormData:', boardFormData);\n        } catch (error) {\n            // Handle error\n            console.log('boardFormData:', boardFormData);\n            console.error('Error creating board:', error);\n        }\n    };\n\n    const handleWorkspaceSelect = (workspace: any) => {\n        dispatch(setSelectedWorkspace(workspace));\n        dispatch(setBoardFormData({ ...boardFormData, workspace: workspace.id })); // Dispatch action to update workspace in board form data\n    };\n\n    const handleFormSubmit = (event: React.FormEvent) => {\n        event.preventDefault();\n        if (formValid) {\n            // Dispatch action to create board with form data\n            dispatch(updateCreateBoardModal());\n            dispatch(resetModalStates());\n            createBoard(boardFormData);\n        }\n    };\n\n    return (\n        <Modal show={createBoardShow} onHide={() => dispatch(updateCreateBoardModal())} centered>\n            <Modal.Header closeButton style={{ backgroundColor: '#33373a', color: '#9fadbc' }}>\n                <Modal.Title>Create a new Board</Modal.Title>\n            </Modal.Header>\n            <Modal.Body\n                style={{ backgroundColor: '#33373a', color: '#9fadbc' }}\n                className=\"modal-body\"\n            >\n                <Form onSubmit={handleFormSubmit}>\n                    <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlInput1\">\n                        <Form.Label>Background image</Form.Label>\n                        <div className=\"modal-background-images\">\n                            {(sampleImages || []).map((image) => {\n                                return (\n                                    <img\n                                        key={image.id}\n                                        src={image.url}\n                                        alt={image.alt}\n                                        className={\n                                            selectedDefaultImage?.id === image.id\n                                                ? 'modal-background selected'\n                                                : 'modal-background'\n                                        }\n                                        onClick={() => handleImageSelect(image)}\n                                    />\n                                );\n                            })}\n                            <div className=\"browse-and-selected\">\n                                <button\n                                    className=\"browse-images\"\n                                    onClick={() => dispatch(setShowImageModal(true))}\n                                >\n                                    <FaArrowRight /> Browse more images...\n                                </button>\n                                {selectedDefaultImage && (\n                                    <div\n                                        className=\"selected-image\"\n                                        style={{ marginTop: '0.5rem', marginBottom: 0 }}\n                                    >\n                                        <img\n                                            src={selectedDefaultImage.url}\n                                            alt={selectedDefaultImage.alt}\n                                            className=\"modal-background selected\"\n                                        />\n                                        <p>Nice choice!</p>\n                                    </div>\n                                )}\n                            </div>\n                            {errorImageMessage && (\n                                <div className=\"p-1 text-danger bg-danger-subtle border border-danger rounded-3 w-100 mb-2\">\n                                    {errorImageMessage}\n                                </div>\n                            )}\n                            <Modal\n                                show={showImageModal}\n                                onHide={() => dispatch(setShowImageModal(false))}\n                                size=\"xl\"\n                                centered\n                            >\n                                <Modal.Header closeButton style={{ backgroundColor: '#33373a' }}>\n                                    <Modal.Title style={{ color: '#9fadbc' }}>\n                                        Choose an image\n                                    </Modal.Title>\n                                </Modal.Header>\n                                <Modal.Body style={{ backgroundColor: '#33373a' }}>\n                                    <div className=\"modal-background-images\">\n                                        {(showImageModal ? images : sampleImages).map((image) => {\n                                            return (\n                                                <img\n                                                    key={image.id}\n                                                    src={image.url}\n                                                    alt={image.alt}\n                                                    className={\n                                                        selectedDefaultImage?.id === image.id\n                                                            ? 'modal-background selected'\n                                                            : 'modal-background'\n                                                    }\n                                                    onClick={() => handleImageSelect(image)}\n                                                />\n                                            );\n                                        })}\n                                    </div>\n                                    <div style={{ textAlign: 'right' }}>\n                                        <Button\n                                            variant=\"secondary\"\n                                            onClick={() => dispatch(setShowImageModal(false))}\n                                        >\n                                            Ok\n                                        </Button>\n                                    </div>\n                                </Modal.Body>\n                            </Modal>\n                        </div>\n                        {/* <div className=\"custom-upload\">\n                            <label htmlFor=\"file-upload\" className=\"file-upload-label\">\n                                Or upload a custom image\n                            </label>\n                            <input\n                                id=\"file-upload\"\n                                type=\"file\"\n                                accept=\"image/*\"\n                                onChange={(e) => handleFileUpload(e.target.files?.[0])}\n                            />\n                        </div> */}\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlInput1\">\n                        <Form.Label>Board title</Form.Label>\n                        <Form.Control\n                            type=\"text\"\n                            className=\"modal-input\"\n                            autoFocus\n                            value={boardFormData.title}\n                            onChange={(e) =>\n                                dispatch(\n                                    setBoardFormData({ ...boardFormData, title: e.target.value })\n                                )\n                            }\n                        />\n                        {errorTitleMessage && (\n                            <div className=\"p-1 text-danger bg-danger-subtle border border-danger rounded-3 w-100 mb-2\">\n                                {errorTitleMessage}\n                            </div>\n                        )}\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlDropdown1\">\n                        <Form.Label>Workspace</Form.Label>\n                        {/* If no workspace exists, the user needs to create a new workspace */}\n                        {workspaces.length === 0 ? (\n                            <Form.Control\n                                type=\"text\"\n                                className=\"modal-input\"\n                                required\n                                value={\n                                    boardFormData.workspace\n                                        ? boardFormData.workspace.name || ''\n                                        : ''\n                                }\n                                onChange={(e) =>\n                                    dispatch(\n                                        setBoardFormData({\n                                            ...boardFormData,\n                                            workspace: {\n                                                name: e.target.value,\n                                            },\n                                        })\n                                    )\n                                }\n                            />\n                        ) : (\n                            // If workspaces exist, the user has to provide the workspace they want their new board to be in\n                            <DropdownButton\n                                as={ButtonGroup}\n                                title={selectedWorkspace ? selectedWorkspace.name : 'Workspace'}\n                                className=\"modal-dropdown-button custom-dropdown-button\"\n                                variant=\"secondary\"\n                            >\n                                {workspaces.map((workspace) => (\n                                    <Dropdown.Item\n                                        key={workspace.id}\n                                        eventKey={workspace.id}\n                                        className=\"modal-dropdown-item\"\n                                        onClick={() => handleWorkspaceSelect(workspace)}\n                                    >\n                                        {workspace.name}\n                                    </Dropdown.Item>\n                                ))}\n                            </DropdownButton>\n                        )}\n                        {errorWorkspaceMessage && (\n                            <div className=\"p-1 text-danger bg-danger-subtle border border-danger rounded-3 w-100 mb-2\">\n                                {errorWorkspaceMessage}\n                            </div>\n                        )}\n                    </Form.Group>\n                    <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlTextarea1\">\n                        <Form.Label>Description</Form.Label>\n                        <Form.Control\n                            as=\"textarea\"\n                            rows={3}\n                            className=\"modal-input\"\n                            value={boardFormData.description}\n                            onChange={(e) =>\n                                dispatch(\n                                    setBoardFormData({\n                                        ...boardFormData,\n                                        description: e.target.value,\n                                    })\n                                )\n                            }\n                        />\n                    </Form.Group>\n                </Form>\n            </Modal.Body>\n            <Modal.Footer style={{ backgroundColor: '#33373a', color: '#9fadbc' }}>\n                <Button\n                    variant=\"secondary\"\n                    onClick={() => dispatch(updateCreateBoardModal())}\n                    className=\"modal-create-button\"\n                >\n                    Close\n                </Button>\n                <Button\n                    variant=\"primary\"\n                    onClick={handleFormSubmit}\n                    disabled={!formValid}\n                    className=\"create-button\"\n                >\n                    Create board\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default CreateBoardModal;\n"],"names":["alignDirection","PropTypes","alignPropType","sm","md","lg","xl","xxl","propTypes","id","href","onClick","title","isRequired","disabled","align","menuRole","renderMenuOnMount","rootCloseEvent","menuVariant","flip","bsPrefix","variant","size","DropdownButton","React","_ref","ref","children","props","_jsxs","Dropdown","_jsx","DropdownToggle","childBsPrefix","DropdownMenu","role","renderOnMount","displayName","ButtonGroup","vertical","className","as","Component","rest","prefix","useBootstrapPrefix","baseClass","concat","classNames","CreateBoardModal","formValid","setFormValid","useState","createBoardShow","useSelector","state","modal","createBoardModal","boardFormData","board","workspaces","workspace","selectedWorkspace","selectedDefaultImage","errorTitleMessage","errorImageMessage","errorWorkspaceMessage","sampleImages","images","showImageModal","dispatch","useDispatch","useEffect","fetchImagesSample","fetchImages","name","handleImageSelect","image","setSelectedDefaultImage","setBoardFormData","default_image","async","accessToken","Cookies","get","response","axios","headers","Authorization","setSampleImages","data","error","console","verifyAccessToken","setImages","length","setSelectedWorkspace","handleFormSubmit","event","preventDefault","updateCreateBoardModal","resetModalStates","post","window","location","reload","log","createBoard","Modal","show","onHide","centered","Header","closeButton","style","backgroundColor","color","Title","Body","Form","onSubmit","Group","controlId","Label","map","src","url","alt","setShowImageModal","FaArrowRight","marginTop","marginBottom","textAlign","Button","Control","type","autoFocus","value","onChange","e","target","required","Item","eventKey","handleWorkspaceSelect","rows","description","Footer"],"sourceRoot":""}